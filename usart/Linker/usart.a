;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#include <stdio.h>
; float Humidity1=0,Humidity2=0,adc[3];
; eeprom float  DailyAverage1=0,DailyAverage2=0,Sample1[2],Sample2[2];
; int Graph1[7],Graph2[7];
; int tenth=0,Min=0,Sec=0,Min1=0,Hour=0,Day=0;
;// External Interrupt 0 service routine
;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 64
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0040 char status,data;
; 0000 0041 
; 0000 0042 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0043 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0044 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0045    {
; 0000 0046    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0047 #if RX_BUFFER_SIZE == 256
; 0000 0048    // special case for receiver buffer size=256
; 0000 0049    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 004A #else
; 0000 004B    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004C    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 004D       {
; 0000 004E       rx_counter=0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004F       rx_buffer_overflow=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0050       }
; 0000 0051 #endif
; 0000 0052    }
;PCODE: $0000002E VOL: 0
; 0000 0053 
; 0000 0054 
; 0000 0055 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 005C {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005D char data;
; 0000 005E while (rx_counter==0);
;PCODE: $00000036 VOL: 0
;	data -> R17
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005F data=rx_buffer[rx_rd_index++];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0060 #if RX_BUFFER_SIZE != 256
; 0000 0061 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0062 #endif
; 0000 0063 #asm("cli")
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
	cli
;PCODE: $0000004B VOL: 0
; 0000 0064 --rx_counter;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0065 #asm("sei")
;PCODE: $0000004F VOL: 0
	sei
;PCODE: $00000050 VOL: 0
; 0000 0066 return data;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0067 }
;PCODE: $00000054 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 100
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0077 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0078 if (tx_counter)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0079    {
; 0000 007A    --tx_counter;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 007B    UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007C #if TX_BUFFER_SIZE != 256
; 0000 007D    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007E #endif
; 0000 007F    }
;PCODE: $0000006A VOL: 0
; 0000 0080 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0087 {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0088 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000071 VOL: 0
;	c -> Y+0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0089 #asm("cli")
;PCODE: $00000078 VOL: 0
	cli
;PCODE: $00000079 VOL: 0
; 0000 008A if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 008B    {
; 0000 008C    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 008D #if TX_BUFFER_SIZE != 256
; 0000 008E    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 008F #endif
; 0000 0090    ++tx_counter;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0091    }
; 0000 0092 else
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0093    UDR=c;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0094 #asm("sei")
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
	sei
;PCODE: $00000099 VOL: 0
; 0000 0095 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;
;
;// Timer2 output compare interrupt service routine
;
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00A3 {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A4 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000009F VOL: 0
;	adc_input -> Y+0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00A5 // Delay needed for the stabilization of the ADC input voltage
; 0000 00A6 delay_us(10);
;PCODE: $000000A3 VOL: 0
; 0000 00A7 // Start the AD conversion
; 0000 00A8 ADCSRA|=0x40;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A9 // Wait for the AD conversion to complete
; 0000 00AA while ((ADCSRA & 0x10)==0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00AB ADCSRA|=0x10;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AC return ADCW;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00AD }
;PCODE: $000000B1 VOL: 0
;
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 00B0 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00B1   tenth++;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00B2     if(tenth==10){
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00B3       Sec++,tenth=0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B4       if(Sec==60){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B5         Min1++,Min++,Sec=0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00B6         if(Min==2){
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B7          adc[0]=read_adc(0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B8          adc[1]=read_adc(1);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B9          adc[2]=read_adc(2);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00BA          Min=0;
;PCODE: $000000DC VOL: 0
; 0000 00BB          }
; 0000 00BC 
; 0000 00BD          if(Min1==60){
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00BE           Hour++,Min1=0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BF           if(Hour==12){
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C0           Sample1[0]=adc[0];
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00C1           Sample2[0]=adc[1];
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00C2           }
; 0000 00C3 
; 0000 00C4             if(Hour==24){
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00C5              Sample1[1]=adc[0];
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00C6              Sample2[1]=adc[1];
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00C7              Day++,Hour=0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00C8              if(Day==7){
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C9               Day=0;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00CA            }
; 0000 00CB           }
;PCODE: $00000106 VOL: 0
; 0000 00CC         }
;PCODE: $00000107 VOL: 0
; 0000 00CD 
; 0000 00CE 
; 0000 00CF     }
;PCODE: $00000108 VOL: 0
; 0000 00D0  }
;PCODE: $00000109 VOL: 0
; 0000 00D1 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 00D3 {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D4 
; 0000 00D5         adc[0]=read_adc(0);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00D6         adc[1]=read_adc(1);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00D7         adc[2]=read_adc(2);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00D8         Humidity1=(adc[0]-560)/5.6;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00D9         Humidity2=(adc[1]-560)/5.6;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00DA         printf("Humidity1=%7.2f",Humidity1);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DB         delay_ms(3000);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00DC         printf("Humidity2=%7.2f",Humidity2);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00DD 
; 0000 00DE 
; 0000 00DF }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;
;
;
;// Declare your global variables here
;void main(void)
; 0000 00E5 {
;PCODE: $00000148 VOL: 0
; 0000 00E6   //  printf("welcom");
; 0000 00E7 
; 0000 00E8 // Declare your local variables here
; 0000 00E9 
; 0000 00EA // Input/Output Ports initialization
; 0000 00EB // Port B initialization
; 0000 00EC // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00ED // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 00EE PORTB=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00EF DDRB=0xF0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00F0 
; 0000 00F1 // Port C initialization
; 0000 00F2 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00F3 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00F4 PORTC=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00F5 DDRC=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00F6 
; 0000 00F7 // Port D initialization
; 0000 00F8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00F9 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00FA PORTD=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00FB DDRD=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00FC 
; 0000 00FD // Timer/Counter 0 initialization
; 0000 00FE // Clock source: System Clock
; 0000 00FF // Clock value: Timer 0 Stopped
; 0000 0100 TCCR0=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0101 TCNT0=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0102 
; 0000 0103 // Timer/Counter 1 initialization
; 0000 0104 // Clock source: System Clock
; 0000 0105 // Clock value: Timer1 Stopped
; 0000 0106 // Mode: Normal top=0xFFFF
; 0000 0107 // OC1A output: Discon.
; 0000 0108 // OC1B output: Discon.
; 0000 0109 // Noise Canceler: Off
; 0000 010A // Input Capture on Falling Edge
; 0000 010B // Timer1 Overflow Interrupt: Off
; 0000 010C // Input Capture Interrupt: Off
; 0000 010D // Compare A Match Interrupt: Off
; 0000 010E // Compare B Match Interrupt: Off
; 0000 010F TCCR1A=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0110 TCCR1B=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0111 TCNT1H=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0112 TCNT1L=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0113 ICR1H=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0114 ICR1L=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0115 OCR1AH=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0116 OCR1AL=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0117 OCR1BH=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0118 OCR1BL=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0119 
; 0000 011A // Timer/Counter 2 initialization
; 0000 011B // Clock source: System Clock
; 0000 011C // Clock value: Timer2 Stopped
; 0000 011D // Mode: Normal top=0xFF
; 0000 011E // OC2 output: Disconnected
; 0000 011F ASSR=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0120 TCCR2=0x0F;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0121 TCNT2=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0122 OCR2=0x60;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0123 
; 0000 0124 // External Interrupt(s) initialization
; 0000 0125 // INT0: On
; 0000 0126 // INT0 Mode: Falling Edge
; 0000 0127 // INT1: Off
; 0000 0128 GICR|=0x40;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0129 MCUCR=0x02;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 012A GIFR=0x40;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 012B 
; 0000 012C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012D TIMSK=0x80;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 012E 
; 0000 012F // USART initialization
; 0000 0130 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0131 // USART Receiver: On
; 0000 0132 // USART Transmitter: On
; 0000 0133 // USART Mode: Asynchronous
; 0000 0134 // USART Baud Rate: 4800
; 0000 0135 UCSRA=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0136 UCSRB=0xD8;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0137 UCSRC=0x86;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0138 UBRRH=0x00;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0139 UBRRL=0x0C;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 013A 
; 0000 013B // Analog Comparator initialization
; 0000 013C // Analog Comparator: Off
; 0000 013D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 013E ACSR=0x80;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 013F SFIOR=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0140 
; 0000 0141 // ADC initialization
; 0000 0142 // ADC Clock frequency: 500.000 kHz
; 0000 0143 // ADC Voltage Reference: AREF pin
; 0000 0144 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0145 ADCSRA=0x81;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0146 
; 0000 0147 // SPI initialization
; 0000 0148 // SPI disabled
; 0000 0149 SPCR=0x00;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 014A 
; 0000 014B // TWI initialization
; 0000 014C // TWI disabled
; 0000 014D TWCR=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 014E 
; 0000 014F // Global enable interrupts
; 0000 0150 #asm("sei")
;PCODE: $00000194 VOL: 0
	sei
;PCODE: $00000195 VOL: 0
; 0000 0151 
; 0000 0152 
; 0000 0153 
; 0000 0154 while (1)
;PCODE: $00000196 VOL: 0
; 0000 0155    {
; 0000 0156 
; 0000 0157 
; 0000 0158           if(Min==1) {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0159             Humidity1=(adc[0]-580)/5.6;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 015A             Humidity2=(adc[1]-580)/5.6;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 015B             printf("Humidity1=%7.2f",Humidity1);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 015C             delay_ms(3000);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 015D             printf("Humidity2=%7.2f",Humidity2);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 015E             while(Min==1){}
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 015F           }
; 0000 0160 
; 0000 0161           if(Min==0||Min==1||Min==2){
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0162            DailyAverage1=(Sample1[0]+Sample1[1])/2;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0163            DailyAverage2=(Sample2[0]+Sample2[1])/2;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0164            Graph1[6]=DailyAverage1;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0165            Graph2[6]=DailyAverage2;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0166            printf("Graph1=%d",Graph1[6]);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0167            delay_ms(3000);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0168            printf("Graph2=%d",Graph2[6]);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0169            Graph1[6]<<1;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 016A            Graph2[6]<<1;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 016B 
; 0000 016C 
; 0000 016D 
; 0000 016E           }
; 0000 016F     }
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0170  }
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
